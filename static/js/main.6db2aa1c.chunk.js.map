{"version":3,"sources":["Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","props","canvasRef","useRef","draw","useEffect","canvas","current","context","getContext","frameCount","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame","ref","NODE_SIZE","getFactionColor","faction","App","nodes","x","y","power","connections","i","length","j","con","n1","n2","alreadyExists","existingCon","push","generateLevel","initialNodes","initialConnections","nodesRef","connectionsRef","travelingPower","selectedNode","clicked","mouseX","mouseY","previousSelectedNode","findClickedNode","previousNode","startNode","endNode","t","style","borderStyle","borderWidth","borderColor","width","height","onClick","event","clientX","clientY","ctx","arrivedPower","tPower","Math","abs","splice","update","clearRect","node1","node2","beginPath","moveTo","lineTo","stroke","textAlign","textBaseline","nStart","nEnd","fillStyle","arc","PI","fill","fillText","toFixed","fillRect","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6db2aa1c.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\n\nexport default function Canvas(\n  props: {\n    draw: (ctx: CanvasRenderingContext2D, frameCount: number) => void;\n  } & React.CanvasHTMLAttributes<HTMLCanvasElement>\n) {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const { draw } = props;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas === null) {\n      return;\n    }\n    const context = canvas.getContext(\"2d\");\n    if (context === null) {\n      return;\n    }\n    let frameCount = 0;\n    let animationFrameId = 0;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n\n  return <canvas ref={canvasRef} {...props} />;\n}\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\n\nconst NODE_SIZE = 20;\nconst POWER_SPEED = 0.0075;\n\ntype Faction = null | \"red\" | \"player\";\n\ntype Node = {\n  x: number;\n  y: number;\n  power: number;\n  faction: Faction;\n  connections: number[];\n};\n\ntype Connection = {\n  n1: number;\n  n2: number;\n};\n\ntype TravelPower = {\n  startNode: number;\n  endNode: number;\n  power: number;\n  faction: Faction;\n  t: number;\n};\n\n// type Statistics = {};\n\nfunction getFactionColor(faction: Faction): string {\n  switch (faction) {\n    case null:\n      return \"#aaaaaa\";\n    case \"red\":\n      return \"#ff0000\";\n    case \"player\":\n      return \"#00ff00\";\n  }\n  return \"#aaaaaa\";\n}\n\nfunction generateLevel(): [Node[], Connection[]] {\n  const nodes = [\n    {\n      x: 100,\n      y: 100,\n      faction: \"player\" as Faction,\n      power: 3,\n      connections: [1, 3],\n    },\n    { x: 250, y: 50, faction: null, power: 3, connections: [0, 2, 3] },\n    { x: 400, y: 100, faction: null, power: 3, connections: [1, 3] },\n    { x: 250, y: 150, faction: null, power: 3, connections: [0, 1, 2, 4, 6] },\n\n    { x: 100, y: 250, faction: null, power: 3, connections: [3, 5] },\n    {\n      x: 250,\n      y: 300,\n      faction: \"red\" as Faction,\n      power: 3,\n      connections: [4, 6],\n    },\n    { x: 400, y: 250, faction: null, power: 3, connections: [3, 5] },\n  ];\n\n  const connections = [];\n  for (let i = 0; i < nodes.length; i++) {\n    for (let j = 0; j < nodes[i].connections.length; j++) {\n      const con = { n1: i, n2: nodes[i].connections[j] };\n      let alreadyExists = false;\n      for (const existingCon of connections) {\n        if (\n          (con.n1 === existingCon.n1 && con.n2 === existingCon.n2) ||\n          (con.n1 === existingCon.n2 && con.n2 === existingCon.n1)\n        ) {\n          alreadyExists = true;\n          break;\n        }\n      }\n      if (!alreadyExists) {\n        connections.push(con);\n      }\n    }\n  }\n\n  return [nodes, connections];\n}\n\nfunction App() {\n  const [initialNodes, initialConnections] = generateLevel();\n\n  const nodesRef = useRef<Node[]>(initialNodes);\n  const connectionsRef = useRef<Connection[]>(initialConnections);\n  const travelingPower = useRef<TravelPower[]>([]);\n  const selectedNode = useRef<number | null>(null);\n\n  // const [stats, setStats] = useState<Statistics>({});\n\n  const findClickedNode = (mouseX: number, mouseY: number): number | null => {\n    const sHalf = NODE_SIZE / 2;\n    for (let i = 0; i < nodesRef.current.length; i++) {\n      const { x, y } = nodesRef.current[i];\n      if (\n        x - sHalf < mouseX &&\n        x + sHalf > mouseX &&\n        y - sHalf < mouseY &&\n        y + sHalf > mouseY\n      ) {\n        return i;\n      }\n    }\n    return null;\n  };\n\n  const clicked = (mouseX: number, mouseY: number) => {\n    const previousSelectedNode = selectedNode.current;\n    selectedNode.current = findClickedNode(mouseX, mouseY);\n    if (selectedNode.current === null || previousSelectedNode === null) {\n      return;\n    }\n\n    const previousNode = nodesRef.current[previousSelectedNode];\n    if (previousNode.faction !== \"player\") {\n      return;\n    }\n\n    travelingPower.current.push({\n      startNode: previousSelectedNode,\n      endNode: selectedNode.current,\n      power: previousNode.power,\n      faction: previousNode.faction,\n      t: 0.0,\n    });\n    previousNode.power = 0;\n    selectedNode.current = null;\n  };\n\n  const update = (frameCount: number) => {\n    if (frameCount % 60 === 0) {\n      // TODO create statistics\n      // let newStats = {};\n      // setStats(newStats);\n    }\n\n    if (frameCount % 50 === 0) {\n      for (let i = 0; i < nodesRef.current.length; i++) {\n        if (nodesRef.current[i].faction === null) {\n          continue;\n        }\n        nodesRef.current[i].power++;\n      }\n    }\n\n    const arrivedPower = [];\n    for (let i = 0; i < travelingPower.current.length; i++) {\n      const tPower = travelingPower.current[i];\n      tPower.t += POWER_SPEED;\n      if (tPower.t >= 1.0) {\n        arrivedPower.push(i);\n      }\n    }\n\n    for (const i of arrivedPower) {\n      const tPower = travelingPower.current[i];\n      const endNode = nodesRef.current[tPower.endNode];\n      if (endNode.faction === tPower.faction) {\n        endNode.power += tPower.power;\n      } else {\n        endNode.power -= tPower.power;\n        if (endNode.power <= 0) {\n          endNode.power = Math.abs(endNode.power);\n          endNode.faction = tPower.faction;\n        }\n      }\n      travelingPower.current.splice(i, 1);\n    }\n  };\n\n  const draw = (ctx: CanvasRenderingContext2D, frameCount: number) => {\n    update(frameCount);\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    for (const { n1, n2 } of connectionsRef.current) {\n      const node1 = nodesRef.current[n1];\n      const node2 = nodesRef.current[n2];\n      ctx.beginPath();\n      ctx.moveTo(node1.x, node1.y);\n      ctx.lineTo(node2.x, node2.y);\n      ctx.stroke();\n    }\n\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    for (let i = 0; i < travelingPower.current.length; i++) {\n      const { startNode, endNode, power, faction, t } = travelingPower.current[\n        i\n      ];\n      const nStart = nodesRef.current[startNode];\n      const nEnd = nodesRef.current[endNode];\n      const x = nStart.x * (1 - t) + nEnd.x * t;\n      const y = nStart.y * (1 - t) + nEnd.y * t;\n\n      ctx.fillStyle = getFactionColor(faction);\n      ctx.beginPath();\n      ctx.arc(x, y, NODE_SIZE / 2, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(power.toFixed(0), x, y);\n    }\n\n    for (let i = 0; i < nodesRef.current.length; i++) {\n      const { x, y, power, faction } = nodesRef.current[i];\n\n      if (selectedNode.current === i) {\n        ctx.fillStyle = \"#000000\";\n        const size = NODE_SIZE * 1.1;\n        ctx.fillRect(x - size / 2, y - size / 2, size, size);\n      }\n\n      ctx.fillStyle = getFactionColor(faction);\n      ctx.fillRect(x - NODE_SIZE / 2, y - NODE_SIZE / 2, NODE_SIZE, NODE_SIZE);\n\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(power.toFixed(0), x, y);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        borderStyle: \"solid\",\n        borderWidth: \"1px\",\n        borderColor: \"black\",\n        width: \"500px\",\n        height: \"500px\",\n      }}\n    >\n      <Canvas\n        width=\"500px\"\n        height=\"500px\"\n        onClick={(event) => {\n          const mouseX = event.clientX;\n          const mouseY = event.clientY;\n          clicked(mouseX, mouseY);\n        }}\n        draw={draw}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
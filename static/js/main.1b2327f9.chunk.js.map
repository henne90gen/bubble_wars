{"version":3,"sources":["Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","props","canvasRef","useRef","draw","useEffect","canvas","current","context","getContext","frameCount","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame","ref","NODE_SIZE","FACTIONS","getFactionColor","faction","App","nodes","x","y","power","connections","i","length","j","con","n1","n2","alreadyExists","existingCon","push","generateLevel","initialNodes","initialConnections","nodesRef","connectionsRef","travelingPower","selectedNode","useState","none","totalPower","controlledNodes","player","red","stats","setStats","clicked","mouseX","mouseY","previousSelectedNode","findClickedNode","previousNode","foundOtherNode","startNode","endNode","t","style","borderStyle","borderWidth","borderColor","width","height","onClick","event","clientX","clientY","ctx","newStats","node","travel","arrivedPower","tPower","Math","abs","splice","update","clearRect","node1","node2","beginPath","moveTo","lineTo","stroke","textAlign","textBaseline","nStart","nEnd","fillStyle","arc","PI","fill","fillText","toFixed","fillRect","size","display","gridTemplateColumns","map","f","s","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b2327f9.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\n\nexport default function Canvas(\n  props: {\n    draw: (ctx: CanvasRenderingContext2D, frameCount: number) => void;\n  } & React.CanvasHTMLAttributes<HTMLCanvasElement>\n) {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const { draw } = props;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas === null) {\n      return;\n    }\n    const context = canvas.getContext(\"2d\");\n    if (context === null) {\n      return;\n    }\n    let frameCount = 0;\n    let animationFrameId = 0;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n\n  return <canvas ref={canvasRef} {...props} />;\n}\n","import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\n\nconst NODE_SIZE = 20;\nconst POWER_SPEED = 0.0075;\n\nconst FACTIONS = [\"none\", \"red\", \"player\"] as const;\ntype FactionTuple = typeof FACTIONS;\ntype Faction = FactionTuple[number];\n\ntype Node = {\n  x: number;\n  y: number;\n  power: number;\n  faction: Faction;\n  connections: number[];\n};\n\ntype Connection = {\n  n1: number;\n  n2: number;\n};\n\ntype TravelPower = {\n  startNode: number;\n  endNode: number;\n  power: number;\n  faction: Faction;\n  t: number;\n};\n\ntype FactionStatistics = {\n  totalPower: number;\n  controlledNodes: number;\n};\ntype Statistics = { [key in Faction]: FactionStatistics };\n\nfunction getFactionColor(faction: Faction): string {\n  switch (faction) {\n    case null:\n      return \"#aaaaaa\";\n    case \"red\":\n      return \"#ff0000\";\n    case \"player\":\n      return \"#00ff00\";\n  }\n  return \"#aaaaaa\";\n}\n\nfunction generateLevel(): [Node[], Connection[]] {\n  const nodes = [\n    {\n      x: 100,\n      y: 100,\n      faction: \"player\" as Faction,\n      power: 3,\n      connections: [1, 3],\n    },\n    {\n      x: 250,\n      y: 50,\n      faction: \"none\" as Faction,\n      power: 3,\n      connections: [0, 2, 3],\n    },\n    {\n      x: 400,\n      y: 100,\n      faction: \"none\" as Faction,\n      power: 3,\n      connections: [1, 3],\n    },\n    {\n      x: 250,\n      y: 150,\n      faction: \"none\" as Faction,\n      power: 3,\n      connections: [0, 1, 2, 4, 6],\n    },\n\n    {\n      x: 100,\n      y: 250,\n      faction: \"none\" as Faction,\n      power: 3,\n      connections: [3, 5],\n    },\n    {\n      x: 250,\n      y: 300,\n      faction: \"red\" as Faction,\n      power: 3,\n      connections: [4, 6],\n    },\n    {\n      x: 400,\n      y: 250,\n      faction: \"none\" as Faction,\n      power: 3,\n      connections: [3, 5],\n    },\n  ];\n\n  const connections = [];\n  for (let i = 0; i < nodes.length; i++) {\n    for (let j = 0; j < nodes[i].connections.length; j++) {\n      const con = { n1: i, n2: nodes[i].connections[j] };\n      let alreadyExists = false;\n      for (const existingCon of connections) {\n        if (\n          (con.n1 === existingCon.n1 && con.n2 === existingCon.n2) ||\n          (con.n1 === existingCon.n2 && con.n2 === existingCon.n1)\n        ) {\n          alreadyExists = true;\n          break;\n        }\n      }\n      if (!alreadyExists) {\n        connections.push(con);\n      }\n    }\n  }\n\n  return [nodes, connections];\n}\n\nfunction App() {\n  const [initialNodes, initialConnections] = generateLevel();\n\n  const nodesRef = useRef<Node[]>(initialNodes);\n  const connectionsRef = useRef<Connection[]>(initialConnections);\n  const travelingPower = useRef<TravelPower[]>([]);\n  const selectedNode = useRef<number | null>(null);\n\n  const [stats, setStats] = useState<Statistics>({\n    none: { totalPower: 3, controlledNodes: 1 },\n    player: { totalPower: 3, controlledNodes: 1 },\n    red: { totalPower: 3, controlledNodes: 1 },\n  });\n\n  const findClickedNode = (mouseX: number, mouseY: number): number | null => {\n    const sHalf = NODE_SIZE / 2;\n    for (let i = 0; i < nodesRef.current.length; i++) {\n      const { x, y } = nodesRef.current[i];\n      if (\n        x - sHalf < mouseX &&\n        x + sHalf > mouseX &&\n        y - sHalf < mouseY &&\n        y + sHalf > mouseY\n      ) {\n        return i;\n      }\n    }\n    return null;\n  };\n\n  const clicked = (mouseX: number, mouseY: number) => {\n    const previousSelectedNode = selectedNode.current;\n    selectedNode.current = findClickedNode(mouseX, mouseY);\n    if (selectedNode.current === null || previousSelectedNode === null) {\n      return;\n    }\n\n    const previousNode = nodesRef.current[previousSelectedNode];\n    if (previousNode.faction !== \"player\") {\n      return;\n    }\n\n    let foundOtherNode = false;\n    for (const con of previousNode.connections) {\n      if (selectedNode.current === con) {\n        foundOtherNode = true;\n        break;\n      }\n    }\n    if (!foundOtherNode) {\n      return;\n    }\n\n    travelingPower.current.push({\n      startNode: previousSelectedNode,\n      endNode: selectedNode.current,\n      power: previousNode.power,\n      faction: previousNode.faction,\n      t: 0.0,\n    });\n    previousNode.power = 0;\n    selectedNode.current = null;\n  };\n\n  const update = (frameCount: number) => {\n    if (frameCount % 60 === 0) {\n      const newStats: Statistics = {\n        none: { totalPower: 0, controlledNodes: 0 },\n        red: { totalPower: 0, controlledNodes: 0 },\n        player: { totalPower: 0, controlledNodes: 0 },\n      };\n      for (const node of nodesRef.current) {\n        newStats[node.faction].controlledNodes++;\n        newStats[node.faction].totalPower += node.power;\n      }\n      for (const travel of travelingPower.current) {\n        newStats[travel.faction].totalPower += travel.power;\n      }\n      setStats(newStats);\n    }\n\n    if (frameCount % 50 === 0) {\n      for (let i = 0; i < nodesRef.current.length; i++) {\n        if (nodesRef.current[i].faction === \"none\") {\n          continue;\n        }\n        nodesRef.current[i].power++;\n      }\n    }\n\n    const arrivedPower = [];\n    for (let i = 0; i < travelingPower.current.length; i++) {\n      const tPower = travelingPower.current[i];\n      tPower.t += POWER_SPEED;\n      if (tPower.t >= 1.0) {\n        arrivedPower.push(i);\n      }\n    }\n\n    for (const i of arrivedPower) {\n      const tPower = travelingPower.current[i];\n      const endNode = nodesRef.current[tPower.endNode];\n      if (endNode.faction === tPower.faction) {\n        endNode.power += tPower.power;\n      } else {\n        endNode.power -= tPower.power;\n        if (endNode.power <= 0) {\n          endNode.power = Math.abs(endNode.power);\n          endNode.faction = tPower.faction;\n        }\n      }\n      travelingPower.current.splice(i, 1);\n    }\n  };\n\n  const draw = (ctx: CanvasRenderingContext2D, frameCount: number) => {\n    update(frameCount);\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    for (const { n1, n2 } of connectionsRef.current) {\n      const node1 = nodesRef.current[n1];\n      const node2 = nodesRef.current[n2];\n      ctx.beginPath();\n      ctx.moveTo(node1.x, node1.y);\n      ctx.lineTo(node2.x, node2.y);\n      ctx.stroke();\n    }\n\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    for (let i = 0; i < travelingPower.current.length; i++) {\n      const { startNode, endNode, power, faction, t } = travelingPower.current[\n        i\n      ];\n      const nStart = nodesRef.current[startNode];\n      const nEnd = nodesRef.current[endNode];\n      const x = nStart.x * (1 - t) + nEnd.x * t;\n      const y = nStart.y * (1 - t) + nEnd.y * t;\n\n      ctx.fillStyle = getFactionColor(faction);\n      ctx.beginPath();\n      ctx.arc(x, y, NODE_SIZE / 2, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(power.toFixed(0), x, y);\n    }\n\n    for (let i = 0; i < nodesRef.current.length; i++) {\n      const { x, y, power, faction } = nodesRef.current[i];\n\n      if (selectedNode.current === i) {\n        ctx.fillStyle = \"#000000\";\n        const size = NODE_SIZE * 1.1;\n        ctx.fillRect(x - size / 2, y - size / 2, size, size);\n      }\n\n      ctx.fillStyle = getFactionColor(faction);\n      ctx.fillRect(x - NODE_SIZE / 2, y - NODE_SIZE / 2, NODE_SIZE, NODE_SIZE);\n\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(power.toFixed(0), x, y);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        borderStyle: \"solid\",\n        borderWidth: \"1px\",\n        borderColor: \"black\",\n        width: \"500px\",\n        height: \"500px\",\n      }}\n    >\n      <Canvas\n        width=\"500px\"\n        height=\"500px\"\n        onClick={(event) => {\n          const mouseX = event.clientX;\n          const mouseY = event.clientY;\n          clicked(mouseX, mouseY);\n        }}\n        draw={draw}\n      />\n      <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr\" }}>\n        <div>Faction</div>\n        <div>Total Power</div>\n        <div>Controlled Nodes</div>\n        {FACTIONS.map((f: Faction) => {\n          const s = stats[f];\n          return (\n            <>\n              <div>{f}</div>\n              <div>{s.totalPower}</div>\n              <div>{s.controlledNodes}</div>\n            </>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}